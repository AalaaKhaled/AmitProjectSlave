
AmitProject.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000065c  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000054  00800060  0000065c  000006d0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  2 .comment      00000030  00000000  00000000  00000724  2**0
                  CONTENTS, READONLY
  3 .note.gnu.avr.deviceinfo 0000003c  00000000  00000000  00000754  2**2
                  CONTENTS, READONLY
  4 .debug_aranges 00000160  00000000  00000000  00000790  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001763  00000000  00000000  000008f0  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000925  00000000  00000000  00002053  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   00000b4f  00000000  00000000  00002978  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000002a8  00000000  00000000  000034c8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004f5  00000000  00000000  00003770  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000adb  00000000  00000000  00003c65  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000110  00000000  00000000  00004740  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 2a 00 	jmp	0x54	; 0x54 <__ctors_end>
   4:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   8:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
   c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  10:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  14:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  18:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  1c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  20:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  24:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  28:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  2c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  30:	0c 94 45 02 	jmp	0x48a	; 0x48a <__vector_12>
  34:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  38:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  3c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  40:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  44:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  48:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  4c:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>
  50:	0c 94 3f 00 	jmp	0x7e	; 0x7e <__bad_interrupt>

00000054 <__ctors_end>:
  54:	11 24       	eor	r1, r1
  56:	1f be       	out	0x3f, r1	; 63
  58:	cf e5       	ldi	r28, 0x5F	; 95
  5a:	d8 e0       	ldi	r29, 0x08	; 8
  5c:	de bf       	out	0x3e, r29	; 62
  5e:	cd bf       	out	0x3d, r28	; 61

00000060 <__do_copy_data>:
  60:	10 e0       	ldi	r17, 0x00	; 0
  62:	a0 e6       	ldi	r26, 0x60	; 96
  64:	b0 e0       	ldi	r27, 0x00	; 0
  66:	ec e5       	ldi	r30, 0x5C	; 92
  68:	f6 e0       	ldi	r31, 0x06	; 6
  6a:	02 c0       	rjmp	.+4      	; 0x70 <__do_copy_data+0x10>
  6c:	05 90       	lpm	r0, Z+
  6e:	0d 92       	st	X+, r0
  70:	a4 3b       	cpi	r26, 0xB4	; 180
  72:	b1 07       	cpc	r27, r17
  74:	d9 f7       	brne	.-10     	; 0x6c <__do_copy_data+0xc>
  76:	0e 94 3a 02 	call	0x474	; 0x474 <main>
  7a:	0c 94 2c 03 	jmp	0x658	; 0x658 <_exit>

0000007e <__bad_interrupt>:
  7e:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

00000082 <DIO_SetPin_Direction>:
*/

#include "DIO.h"
void DIO_SetPin_Direction(Uint8t port, Uint8t pin, Uint8t direction)
{
	switch (direction)
  82:	44 23       	and	r20, r20
  84:	19 f0       	breq	.+6      	; 0x8c <DIO_SetPin_Direction+0xa>
  86:	41 30       	cpi	r20, 0x01	; 1
  88:	c9 f1       	breq	.+114    	; 0xfc <DIO_SetPin_Direction+0x7a>
  8a:	08 95       	ret
	{
		case DIO_PIN_INPUT:
		switch(port)
  8c:	81 30       	cpi	r24, 0x01	; 1
  8e:	91 f0       	breq	.+36     	; 0xb4 <DIO_SetPin_Direction+0x32>
  90:	28 f0       	brcs	.+10     	; 0x9c <DIO_SetPin_Direction+0x1a>
  92:	82 30       	cpi	r24, 0x02	; 2
  94:	d9 f0       	breq	.+54     	; 0xcc <DIO_SetPin_Direction+0x4a>
  96:	83 30       	cpi	r24, 0x03	; 3
  98:	29 f1       	breq	.+74     	; 0xe4 <DIO_SetPin_Direction+0x62>
  9a:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(DDRA, pin);
  9c:	2a b3       	in	r18, 0x1a	; 26
  9e:	81 e0       	ldi	r24, 0x01	; 1
  a0:	90 e0       	ldi	r25, 0x00	; 0
  a2:	02 c0       	rjmp	.+4      	; 0xa8 <DIO_SetPin_Direction+0x26>
  a4:	88 0f       	add	r24, r24
  a6:	99 1f       	adc	r25, r25
  a8:	6a 95       	dec	r22
  aa:	e2 f7       	brpl	.-8      	; 0xa4 <DIO_SetPin_Direction+0x22>
  ac:	80 95       	com	r24
  ae:	82 23       	and	r24, r18
  b0:	8a bb       	out	0x1a, r24	; 26
			break;
  b2:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(DDRB, pin);
  b4:	27 b3       	in	r18, 0x17	; 23
  b6:	81 e0       	ldi	r24, 0x01	; 1
  b8:	90 e0       	ldi	r25, 0x00	; 0
  ba:	02 c0       	rjmp	.+4      	; 0xc0 <DIO_SetPin_Direction+0x3e>
  bc:	88 0f       	add	r24, r24
  be:	99 1f       	adc	r25, r25
  c0:	6a 95       	dec	r22
  c2:	e2 f7       	brpl	.-8      	; 0xbc <DIO_SetPin_Direction+0x3a>
  c4:	80 95       	com	r24
  c6:	82 23       	and	r24, r18
  c8:	87 bb       	out	0x17, r24	; 23
			break;
  ca:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(DDRC, pin);
  cc:	24 b3       	in	r18, 0x14	; 20
  ce:	81 e0       	ldi	r24, 0x01	; 1
  d0:	90 e0       	ldi	r25, 0x00	; 0
  d2:	02 c0       	rjmp	.+4      	; 0xd8 <DIO_SetPin_Direction+0x56>
  d4:	88 0f       	add	r24, r24
  d6:	99 1f       	adc	r25, r25
  d8:	6a 95       	dec	r22
  da:	e2 f7       	brpl	.-8      	; 0xd4 <DIO_SetPin_Direction+0x52>
  dc:	80 95       	com	r24
  de:	82 23       	and	r24, r18
  e0:	84 bb       	out	0x14, r24	; 20
			break;
  e2:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(DDRD, pin);
  e4:	21 b3       	in	r18, 0x11	; 17
  e6:	81 e0       	ldi	r24, 0x01	; 1
  e8:	90 e0       	ldi	r25, 0x00	; 0
  ea:	02 c0       	rjmp	.+4      	; 0xf0 <DIO_SetPin_Direction+0x6e>
  ec:	88 0f       	add	r24, r24
  ee:	99 1f       	adc	r25, r25
  f0:	6a 95       	dec	r22
  f2:	e2 f7       	brpl	.-8      	; 0xec <DIO_SetPin_Direction+0x6a>
  f4:	80 95       	com	r24
  f6:	82 23       	and	r24, r18
  f8:	81 bb       	out	0x11, r24	; 17
			break;
  fa:	08 95       	ret
		}
		break;
		case DIO_PIN_OUTPUT:
		switch(port)
  fc:	81 30       	cpi	r24, 0x01	; 1
  fe:	89 f0       	breq	.+34     	; 0x122 <DIO_SetPin_Direction+0xa0>
 100:	28 f0       	brcs	.+10     	; 0x10c <DIO_SetPin_Direction+0x8a>
 102:	82 30       	cpi	r24, 0x02	; 2
 104:	c9 f0       	breq	.+50     	; 0x138 <DIO_SetPin_Direction+0xb6>
 106:	83 30       	cpi	r24, 0x03	; 3
 108:	11 f1       	breq	.+68     	; 0x14e <DIO_SetPin_Direction+0xcc>
 10a:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(DDRA, pin);
 10c:	2a b3       	in	r18, 0x1a	; 26
 10e:	81 e0       	ldi	r24, 0x01	; 1
 110:	90 e0       	ldi	r25, 0x00	; 0
 112:	02 c0       	rjmp	.+4      	; 0x118 <DIO_SetPin_Direction+0x96>
 114:	88 0f       	add	r24, r24
 116:	99 1f       	adc	r25, r25
 118:	6a 95       	dec	r22
 11a:	e2 f7       	brpl	.-8      	; 0x114 <DIO_SetPin_Direction+0x92>
 11c:	82 2b       	or	r24, r18
 11e:	8a bb       	out	0x1a, r24	; 26
			break;
 120:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(DDRB, pin);
 122:	27 b3       	in	r18, 0x17	; 23
 124:	81 e0       	ldi	r24, 0x01	; 1
 126:	90 e0       	ldi	r25, 0x00	; 0
 128:	02 c0       	rjmp	.+4      	; 0x12e <DIO_SetPin_Direction+0xac>
 12a:	88 0f       	add	r24, r24
 12c:	99 1f       	adc	r25, r25
 12e:	6a 95       	dec	r22
 130:	e2 f7       	brpl	.-8      	; 0x12a <DIO_SetPin_Direction+0xa8>
 132:	82 2b       	or	r24, r18
 134:	87 bb       	out	0x17, r24	; 23
			break;
 136:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(DDRC, pin);
 138:	24 b3       	in	r18, 0x14	; 20
 13a:	81 e0       	ldi	r24, 0x01	; 1
 13c:	90 e0       	ldi	r25, 0x00	; 0
 13e:	02 c0       	rjmp	.+4      	; 0x144 <DIO_SetPin_Direction+0xc2>
 140:	88 0f       	add	r24, r24
 142:	99 1f       	adc	r25, r25
 144:	6a 95       	dec	r22
 146:	e2 f7       	brpl	.-8      	; 0x140 <DIO_SetPin_Direction+0xbe>
 148:	82 2b       	or	r24, r18
 14a:	84 bb       	out	0x14, r24	; 20
			break;
 14c:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(DDRD, pin);
 14e:	21 b3       	in	r18, 0x11	; 17
 150:	81 e0       	ldi	r24, 0x01	; 1
 152:	90 e0       	ldi	r25, 0x00	; 0
 154:	02 c0       	rjmp	.+4      	; 0x15a <DIO_SetPin_Direction+0xd8>
 156:	88 0f       	add	r24, r24
 158:	99 1f       	adc	r25, r25
 15a:	6a 95       	dec	r22
 15c:	e2 f7       	brpl	.-8      	; 0x156 <DIO_SetPin_Direction+0xd4>
 15e:	82 2b       	or	r24, r18
 160:	81 bb       	out	0x11, r24	; 17
 162:	08 95       	ret

00000164 <DIO_SetPin_Value>:
		break;
	}
}
void DIO_SetPin_Value(Uint8t port, Uint8t pin, Uint8t value)
{
	switch (value)
 164:	44 23       	and	r20, r20
 166:	19 f0       	breq	.+6      	; 0x16e <DIO_SetPin_Value+0xa>
 168:	41 30       	cpi	r20, 0x01	; 1
 16a:	c9 f1       	breq	.+114    	; 0x1de <DIO_SetPin_Value+0x7a>
 16c:	08 95       	ret
	{
		case DIO_PIN_LOW:
		switch(port)
 16e:	81 30       	cpi	r24, 0x01	; 1
 170:	91 f0       	breq	.+36     	; 0x196 <DIO_SetPin_Value+0x32>
 172:	28 f0       	brcs	.+10     	; 0x17e <DIO_SetPin_Value+0x1a>
 174:	82 30       	cpi	r24, 0x02	; 2
 176:	d9 f0       	breq	.+54     	; 0x1ae <DIO_SetPin_Value+0x4a>
 178:	83 30       	cpi	r24, 0x03	; 3
 17a:	29 f1       	breq	.+74     	; 0x1c6 <DIO_SetPin_Value+0x62>
 17c:	08 95       	ret
		{
			case DIO_PORTA:
			CLR_BIT(PORTA, pin);
 17e:	2b b3       	in	r18, 0x1b	; 27
 180:	81 e0       	ldi	r24, 0x01	; 1
 182:	90 e0       	ldi	r25, 0x00	; 0
 184:	02 c0       	rjmp	.+4      	; 0x18a <DIO_SetPin_Value+0x26>
 186:	88 0f       	add	r24, r24
 188:	99 1f       	adc	r25, r25
 18a:	6a 95       	dec	r22
 18c:	e2 f7       	brpl	.-8      	; 0x186 <DIO_SetPin_Value+0x22>
 18e:	80 95       	com	r24
 190:	82 23       	and	r24, r18
 192:	8b bb       	out	0x1b, r24	; 27
			break;
 194:	08 95       	ret
			case DIO_PORTB:
			CLR_BIT(PORTB, pin);
 196:	28 b3       	in	r18, 0x18	; 24
 198:	81 e0       	ldi	r24, 0x01	; 1
 19a:	90 e0       	ldi	r25, 0x00	; 0
 19c:	02 c0       	rjmp	.+4      	; 0x1a2 <DIO_SetPin_Value+0x3e>
 19e:	88 0f       	add	r24, r24
 1a0:	99 1f       	adc	r25, r25
 1a2:	6a 95       	dec	r22
 1a4:	e2 f7       	brpl	.-8      	; 0x19e <DIO_SetPin_Value+0x3a>
 1a6:	80 95       	com	r24
 1a8:	82 23       	and	r24, r18
 1aa:	88 bb       	out	0x18, r24	; 24
			break;
 1ac:	08 95       	ret
			case DIO_PORTC:
			CLR_BIT(PORTC, pin);
 1ae:	25 b3       	in	r18, 0x15	; 21
 1b0:	81 e0       	ldi	r24, 0x01	; 1
 1b2:	90 e0       	ldi	r25, 0x00	; 0
 1b4:	02 c0       	rjmp	.+4      	; 0x1ba <DIO_SetPin_Value+0x56>
 1b6:	88 0f       	add	r24, r24
 1b8:	99 1f       	adc	r25, r25
 1ba:	6a 95       	dec	r22
 1bc:	e2 f7       	brpl	.-8      	; 0x1b6 <DIO_SetPin_Value+0x52>
 1be:	80 95       	com	r24
 1c0:	82 23       	and	r24, r18
 1c2:	85 bb       	out	0x15, r24	; 21
			break;
 1c4:	08 95       	ret
			case DIO_PORTD:
			CLR_BIT(PORTD, pin);
 1c6:	22 b3       	in	r18, 0x12	; 18
 1c8:	81 e0       	ldi	r24, 0x01	; 1
 1ca:	90 e0       	ldi	r25, 0x00	; 0
 1cc:	02 c0       	rjmp	.+4      	; 0x1d2 <DIO_SetPin_Value+0x6e>
 1ce:	88 0f       	add	r24, r24
 1d0:	99 1f       	adc	r25, r25
 1d2:	6a 95       	dec	r22
 1d4:	e2 f7       	brpl	.-8      	; 0x1ce <DIO_SetPin_Value+0x6a>
 1d6:	80 95       	com	r24
 1d8:	82 23       	and	r24, r18
 1da:	82 bb       	out	0x12, r24	; 18
			break;
 1dc:	08 95       	ret
		}
		break;
		case DIO_PIN_HIGH:
		switch(port)
 1de:	81 30       	cpi	r24, 0x01	; 1
 1e0:	89 f0       	breq	.+34     	; 0x204 <DIO_SetPin_Value+0xa0>
 1e2:	28 f0       	brcs	.+10     	; 0x1ee <DIO_SetPin_Value+0x8a>
 1e4:	82 30       	cpi	r24, 0x02	; 2
 1e6:	c9 f0       	breq	.+50     	; 0x21a <DIO_SetPin_Value+0xb6>
 1e8:	83 30       	cpi	r24, 0x03	; 3
 1ea:	11 f1       	breq	.+68     	; 0x230 <DIO_SetPin_Value+0xcc>
 1ec:	08 95       	ret
		{
			case DIO_PORTA:
			SET_BIT(PORTA, pin);
 1ee:	2b b3       	in	r18, 0x1b	; 27
 1f0:	81 e0       	ldi	r24, 0x01	; 1
 1f2:	90 e0       	ldi	r25, 0x00	; 0
 1f4:	02 c0       	rjmp	.+4      	; 0x1fa <DIO_SetPin_Value+0x96>
 1f6:	88 0f       	add	r24, r24
 1f8:	99 1f       	adc	r25, r25
 1fa:	6a 95       	dec	r22
 1fc:	e2 f7       	brpl	.-8      	; 0x1f6 <DIO_SetPin_Value+0x92>
 1fe:	82 2b       	or	r24, r18
 200:	8b bb       	out	0x1b, r24	; 27
			break;
 202:	08 95       	ret
			case DIO_PORTB:
			SET_BIT(PORTB, pin);
 204:	28 b3       	in	r18, 0x18	; 24
 206:	81 e0       	ldi	r24, 0x01	; 1
 208:	90 e0       	ldi	r25, 0x00	; 0
 20a:	02 c0       	rjmp	.+4      	; 0x210 <DIO_SetPin_Value+0xac>
 20c:	88 0f       	add	r24, r24
 20e:	99 1f       	adc	r25, r25
 210:	6a 95       	dec	r22
 212:	e2 f7       	brpl	.-8      	; 0x20c <DIO_SetPin_Value+0xa8>
 214:	82 2b       	or	r24, r18
 216:	88 bb       	out	0x18, r24	; 24
			break;
 218:	08 95       	ret
			case DIO_PORTC:
			SET_BIT(PORTC, pin);
 21a:	25 b3       	in	r18, 0x15	; 21
 21c:	81 e0       	ldi	r24, 0x01	; 1
 21e:	90 e0       	ldi	r25, 0x00	; 0
 220:	02 c0       	rjmp	.+4      	; 0x226 <DIO_SetPin_Value+0xc2>
 222:	88 0f       	add	r24, r24
 224:	99 1f       	adc	r25, r25
 226:	6a 95       	dec	r22
 228:	e2 f7       	brpl	.-8      	; 0x222 <DIO_SetPin_Value+0xbe>
 22a:	82 2b       	or	r24, r18
 22c:	85 bb       	out	0x15, r24	; 21
			break;
 22e:	08 95       	ret
			case DIO_PORTD:
			SET_BIT(PORTD, pin);
 230:	22 b3       	in	r18, 0x12	; 18
 232:	81 e0       	ldi	r24, 0x01	; 1
 234:	90 e0       	ldi	r25, 0x00	; 0
 236:	02 c0       	rjmp	.+4      	; 0x23c <DIO_SetPin_Value+0xd8>
 238:	88 0f       	add	r24, r24
 23a:	99 1f       	adc	r25, r25
 23c:	6a 95       	dec	r22
 23e:	e2 f7       	brpl	.-8      	; 0x238 <DIO_SetPin_Value+0xd4>
 240:	82 2b       	or	r24, r18
 242:	82 bb       	out	0x12, r24	; 18
 244:	08 95       	ret

00000246 <LCD_WRITE_CMD>:
void LCD_WRITE_NBR(Uint32t numbr)
{
	Uint8t num[10];
	ltoa(numbr, (Uint8t*)num, 10);
	LCD_WRITE_STR(num);
}
 246:	cf 93       	push	r28
 248:	c8 2f       	mov	r28, r24
 24a:	40 e0       	ldi	r20, 0x00	; 0
 24c:	61 e0       	ldi	r22, 0x01	; 1
 24e:	81 e0       	ldi	r24, 0x01	; 1
 250:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
 254:	40 e0       	ldi	r20, 0x00	; 0
 256:	62 e0       	ldi	r22, 0x02	; 2
 258:	81 e0       	ldi	r24, 0x01	; 1
 25a:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
 25e:	40 e0       	ldi	r20, 0x00	; 0
 260:	63 e0       	ldi	r22, 0x03	; 3
 262:	81 e0       	ldi	r24, 0x01	; 1
 264:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
 268:	8b b3       	in	r24, 0x1b	; 27
 26a:	9c 2f       	mov	r25, r28
 26c:	90 7f       	andi	r25, 0xF0	; 240
 26e:	8f 70       	andi	r24, 0x0F	; 15
 270:	89 2b       	or	r24, r25
 272:	8b bb       	out	0x1b, r24	; 27
 274:	41 e0       	ldi	r20, 0x01	; 1
 276:	63 e0       	ldi	r22, 0x03	; 3
 278:	81 e0       	ldi	r24, 0x01	; 1
 27a:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
 27e:	8f e9       	ldi	r24, 0x9F	; 159
 280:	9f e0       	ldi	r25, 0x0F	; 15
 282:	01 97       	sbiw	r24, 0x01	; 1
 284:	f1 f7       	brne	.-4      	; 0x282 <LCD_WRITE_CMD+0x3c>
 286:	00 c0       	rjmp	.+0      	; 0x288 <LCD_WRITE_CMD+0x42>
 288:	00 00       	nop
 28a:	40 e0       	ldi	r20, 0x00	; 0
 28c:	63 e0       	ldi	r22, 0x03	; 3
 28e:	81 e0       	ldi	r24, 0x01	; 1
 290:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
 294:	20 e1       	ldi	r18, 0x10	; 16
 296:	c2 9f       	mul	r28, r18
 298:	c0 01       	movw	r24, r0
 29a:	11 24       	eor	r1, r1
 29c:	9b b3       	in	r25, 0x1b	; 27
 29e:	9f 70       	andi	r25, 0x0F	; 15
 2a0:	89 2b       	or	r24, r25
 2a2:	8b bb       	out	0x1b, r24	; 27
 2a4:	41 e0       	ldi	r20, 0x01	; 1
 2a6:	63 e0       	ldi	r22, 0x03	; 3
 2a8:	81 e0       	ldi	r24, 0x01	; 1
 2aa:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
 2ae:	8f e9       	ldi	r24, 0x9F	; 159
 2b0:	9f e0       	ldi	r25, 0x0F	; 15
 2b2:	01 97       	sbiw	r24, 0x01	; 1
 2b4:	f1 f7       	brne	.-4      	; 0x2b2 <LCD_WRITE_CMD+0x6c>
 2b6:	00 c0       	rjmp	.+0      	; 0x2b8 <LCD_WRITE_CMD+0x72>
 2b8:	00 00       	nop
 2ba:	40 e0       	ldi	r20, 0x00	; 0
 2bc:	63 e0       	ldi	r22, 0x03	; 3
 2be:	81 e0       	ldi	r24, 0x01	; 1
 2c0:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
 2c4:	8f e3       	ldi	r24, 0x3F	; 63
 2c6:	9f e1       	ldi	r25, 0x1F	; 31
 2c8:	01 97       	sbiw	r24, 0x01	; 1
 2ca:	f1 f7       	brne	.-4      	; 0x2c8 <LCD_WRITE_CMD+0x82>
 2cc:	00 c0       	rjmp	.+0      	; 0x2ce <LCD_WRITE_CMD+0x88>
 2ce:	00 00       	nop
 2d0:	cf 91       	pop	r28
 2d2:	08 95       	ret

000002d4 <LCD_Init>:
 2d4:	41 e0       	ldi	r20, 0x01	; 1
 2d6:	61 e0       	ldi	r22, 0x01	; 1
 2d8:	81 e0       	ldi	r24, 0x01	; 1
 2da:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPin_Direction>
 2de:	41 e0       	ldi	r20, 0x01	; 1
 2e0:	62 e0       	ldi	r22, 0x02	; 2
 2e2:	81 e0       	ldi	r24, 0x01	; 1
 2e4:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPin_Direction>
 2e8:	41 e0       	ldi	r20, 0x01	; 1
 2ea:	63 e0       	ldi	r22, 0x03	; 3
 2ec:	81 e0       	ldi	r24, 0x01	; 1
 2ee:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPin_Direction>
 2f2:	41 e0       	ldi	r20, 0x01	; 1
 2f4:	64 e0       	ldi	r22, 0x04	; 4
 2f6:	80 e0       	ldi	r24, 0x00	; 0
 2f8:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPin_Direction>
 2fc:	41 e0       	ldi	r20, 0x01	; 1
 2fe:	65 e0       	ldi	r22, 0x05	; 5
 300:	80 e0       	ldi	r24, 0x00	; 0
 302:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPin_Direction>
 306:	41 e0       	ldi	r20, 0x01	; 1
 308:	66 e0       	ldi	r22, 0x06	; 6
 30a:	80 e0       	ldi	r24, 0x00	; 0
 30c:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPin_Direction>
 310:	41 e0       	ldi	r20, 0x01	; 1
 312:	67 e0       	ldi	r22, 0x07	; 7
 314:	80 e0       	ldi	r24, 0x00	; 0
 316:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPin_Direction>
 31a:	2f ef       	ldi	r18, 0xFF	; 255
 31c:	81 ee       	ldi	r24, 0xE1	; 225
 31e:	94 e0       	ldi	r25, 0x04	; 4
 320:	21 50       	subi	r18, 0x01	; 1
 322:	80 40       	sbci	r24, 0x00	; 0
 324:	90 40       	sbci	r25, 0x00	; 0
 326:	e1 f7       	brne	.-8      	; 0x320 <LCD_Init+0x4c>
 328:	00 c0       	rjmp	.+0      	; 0x32a <LCD_Init+0x56>
 32a:	00 00       	nop
 32c:	82 e0       	ldi	r24, 0x02	; 2
 32e:	0e 94 23 01 	call	0x246	; 0x246 <LCD_WRITE_CMD>
 332:	83 e3       	ldi	r24, 0x33	; 51
 334:	0e 94 23 01 	call	0x246	; 0x246 <LCD_WRITE_CMD>
 338:	82 e3       	ldi	r24, 0x32	; 50
 33a:	0e 94 23 01 	call	0x246	; 0x246 <LCD_WRITE_CMD>
 33e:	88 e2       	ldi	r24, 0x28	; 40
 340:	0e 94 23 01 	call	0x246	; 0x246 <LCD_WRITE_CMD>
 344:	8c e0       	ldi	r24, 0x0C	; 12
 346:	0e 94 23 01 	call	0x246	; 0x246 <LCD_WRITE_CMD>
 34a:	81 e0       	ldi	r24, 0x01	; 1
 34c:	0e 94 23 01 	call	0x246	; 0x246 <LCD_WRITE_CMD>
 350:	86 e0       	ldi	r24, 0x06	; 6
 352:	0e 94 23 01 	call	0x246	; 0x246 <LCD_WRITE_CMD>
 356:	08 95       	ret

00000358 <LCD_WRITE_DTA>:
 358:	cf 93       	push	r28
 35a:	c8 2f       	mov	r28, r24
 35c:	41 e0       	ldi	r20, 0x01	; 1
 35e:	61 e0       	ldi	r22, 0x01	; 1
 360:	81 e0       	ldi	r24, 0x01	; 1
 362:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
 366:	40 e0       	ldi	r20, 0x00	; 0
 368:	62 e0       	ldi	r22, 0x02	; 2
 36a:	81 e0       	ldi	r24, 0x01	; 1
 36c:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
 370:	40 e0       	ldi	r20, 0x00	; 0
 372:	63 e0       	ldi	r22, 0x03	; 3
 374:	81 e0       	ldi	r24, 0x01	; 1
 376:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
 37a:	8b b3       	in	r24, 0x1b	; 27
 37c:	9c 2f       	mov	r25, r28
 37e:	90 7f       	andi	r25, 0xF0	; 240
 380:	8f 70       	andi	r24, 0x0F	; 15
 382:	89 2b       	or	r24, r25
 384:	8b bb       	out	0x1b, r24	; 27
 386:	41 e0       	ldi	r20, 0x01	; 1
 388:	63 e0       	ldi	r22, 0x03	; 3
 38a:	81 e0       	ldi	r24, 0x01	; 1
 38c:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
 390:	8f e9       	ldi	r24, 0x9F	; 159
 392:	9f e0       	ldi	r25, 0x0F	; 15
 394:	01 97       	sbiw	r24, 0x01	; 1
 396:	f1 f7       	brne	.-4      	; 0x394 <LCD_WRITE_DTA+0x3c>
 398:	00 c0       	rjmp	.+0      	; 0x39a <LCD_WRITE_DTA+0x42>
 39a:	00 00       	nop
 39c:	40 e0       	ldi	r20, 0x00	; 0
 39e:	63 e0       	ldi	r22, 0x03	; 3
 3a0:	81 e0       	ldi	r24, 0x01	; 1
 3a2:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
 3a6:	20 e1       	ldi	r18, 0x10	; 16
 3a8:	c2 9f       	mul	r28, r18
 3aa:	c0 01       	movw	r24, r0
 3ac:	11 24       	eor	r1, r1
 3ae:	9b b3       	in	r25, 0x1b	; 27
 3b0:	9f 70       	andi	r25, 0x0F	; 15
 3b2:	89 2b       	or	r24, r25
 3b4:	8b bb       	out	0x1b, r24	; 27
 3b6:	41 e0       	ldi	r20, 0x01	; 1
 3b8:	63 e0       	ldi	r22, 0x03	; 3
 3ba:	81 e0       	ldi	r24, 0x01	; 1
 3bc:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
 3c0:	8f e9       	ldi	r24, 0x9F	; 159
 3c2:	9f e0       	ldi	r25, 0x0F	; 15
 3c4:	01 97       	sbiw	r24, 0x01	; 1
 3c6:	f1 f7       	brne	.-4      	; 0x3c4 <LCD_WRITE_DTA+0x6c>
 3c8:	00 c0       	rjmp	.+0      	; 0x3ca <LCD_WRITE_DTA+0x72>
 3ca:	00 00       	nop
 3cc:	40 e0       	ldi	r20, 0x00	; 0
 3ce:	63 e0       	ldi	r22, 0x03	; 3
 3d0:	81 e0       	ldi	r24, 0x01	; 1
 3d2:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
 3d6:	8f e3       	ldi	r24, 0x3F	; 63
 3d8:	9f e1       	ldi	r25, 0x1F	; 31
 3da:	01 97       	sbiw	r24, 0x01	; 1
 3dc:	f1 f7       	brne	.-4      	; 0x3da <LCD_WRITE_DTA+0x82>
 3de:	00 c0       	rjmp	.+0      	; 0x3e0 <LCD_WRITE_DTA+0x88>
 3e0:	00 00       	nop
 3e2:	cf 91       	pop	r28
 3e4:	08 95       	ret

000003e6 <LCD_WRITE_STR>:
 3e6:	cf 93       	push	r28
 3e8:	df 93       	push	r29
 3ea:	ec 01       	movw	r28, r24
 3ec:	03 c0       	rjmp	.+6      	; 0x3f4 <LCD_WRITE_STR+0xe>
 3ee:	0e 94 ac 01 	call	0x358	; 0x358 <LCD_WRITE_DTA>
 3f2:	21 96       	adiw	r28, 0x01	; 1
 3f4:	88 81       	ld	r24, Y
 3f6:	81 11       	cpse	r24, r1
 3f8:	fa cf       	rjmp	.-12     	; 0x3ee <LCD_WRITE_STR+0x8>
 3fa:	df 91       	pop	r29
 3fc:	cf 91       	pop	r28
 3fe:	08 95       	ret

00000400 <LCD_CLEAR>:
void LCD_CLEAR(void)/*Clear data display on screen*/
{
	LCD_WRITE_CMD(0x01);
 400:	81 e0       	ldi	r24, 0x01	; 1
 402:	0e 94 23 01 	call	0x246	; 0x246 <LCD_WRITE_CMD>
 406:	08 95       	ret

00000408 <LED0_Init>:
{
	DIO_SetPin_Value(LED1_PORT, LED1_PIN, LED_LOW);
}
void LED1_TGL(void)
{
	DIO_TglPin_Value(LED1_PORT, LED1_PIN);
 408:	41 e0       	ldi	r20, 0x01	; 1
 40a:	62 e0       	ldi	r22, 0x02	; 2
 40c:	82 e0       	ldi	r24, 0x02	; 2
 40e:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPin_Direction>
 412:	08 95       	ret

00000414 <LED0_ON>:
 414:	41 e0       	ldi	r20, 0x01	; 1
 416:	62 e0       	ldi	r22, 0x02	; 2
 418:	82 e0       	ldi	r24, 0x02	; 2
 41a:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
 41e:	08 95       	ret

00000420 <LED0_OFF>:
 420:	40 e0       	ldi	r20, 0x00	; 0
 422:	62 e0       	ldi	r22, 0x02	; 2
 424:	82 e0       	ldi	r24, 0x02	; 2
 426:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
 42a:	08 95       	ret

0000042c <LED1_Init>:
 42c:	41 e0       	ldi	r20, 0x01	; 1
 42e:	67 e0       	ldi	r22, 0x07	; 7
 430:	82 e0       	ldi	r24, 0x02	; 2
 432:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPin_Direction>
 436:	08 95       	ret

00000438 <LED1_ON>:
 438:	41 e0       	ldi	r20, 0x01	; 1
 43a:	67 e0       	ldi	r22, 0x07	; 7
 43c:	82 e0       	ldi	r24, 0x02	; 2
 43e:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
 442:	08 95       	ret

00000444 <LED1_OFF>:
 444:	40 e0       	ldi	r20, 0x00	; 0
 446:	67 e0       	ldi	r22, 0x07	; 7
 448:	82 e0       	ldi	r24, 0x02	; 2
 44a:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
 44e:	08 95       	ret

00000450 <LED2_Init>:
}
/*LED-2 Functions*/
void LED2_Init(void)
{
	DIO_SetPin_Direction(LED2_PORT, LED2_PIN, LED_OUTPUT);
 450:	41 e0       	ldi	r20, 0x01	; 1
 452:	63 e0       	ldi	r22, 0x03	; 3
 454:	83 e0       	ldi	r24, 0x03	; 3
 456:	0e 94 41 00 	call	0x82	; 0x82 <DIO_SetPin_Direction>
 45a:	08 95       	ret

0000045c <LED2_ON>:
}
void LED2_ON(void)
{
	DIO_SetPin_Value(LED2_PORT, LED2_PIN, LED_HIGH);
 45c:	41 e0       	ldi	r20, 0x01	; 1
 45e:	63 e0       	ldi	r22, 0x03	; 3
 460:	83 e0       	ldi	r24, 0x03	; 3
 462:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
 466:	08 95       	ret

00000468 <LED2_OFF>:
}
void LED2_OFF(void)
{
	DIO_SetPin_Value(LED2_PORT, LED2_PIN, LED_LOW);
 468:	40 e0       	ldi	r20, 0x00	; 0
 46a:	63 e0       	ldi	r22, 0x03	; 3
 46c:	83 e0       	ldi	r24, 0x03	; 3
 46e:	0e 94 b2 00 	call	0x164	; 0x164 <DIO_SetPin_Value>
 472:	08 95       	ret

00000474 <main>:
#include "SPI.h"
#include "LCD.h"

int main(void)
{
	LED0_Init();
 474:	0e 94 04 02 	call	0x408	; 0x408 <LED0_Init>
	LED1_Init();
 478:	0e 94 16 02 	call	0x42c	; 0x42c <LED1_Init>
	LED2_Init();
 47c:	0e 94 28 02 	call	0x450	; 0x450 <LED2_Init>
	SPI_Init();
 480:	0e 94 1a 03 	call	0x634	; 0x634 <SPI_Init>
	LCD_Init();
 484:	0e 94 6a 01 	call	0x2d4	; 0x2d4 <LCD_Init>
 488:	ff cf       	rjmp	.-2      	; 0x488 <main+0x14>

0000048a <__vector_12>:
    {
		
    }
}

ISR(SPI_STC_vect){
 48a:	1f 92       	push	r1
 48c:	0f 92       	push	r0
 48e:	0f b6       	in	r0, 0x3f	; 63
 490:	0f 92       	push	r0
 492:	11 24       	eor	r1, r1
 494:	2f 93       	push	r18
 496:	3f 93       	push	r19
 498:	4f 93       	push	r20
 49a:	5f 93       	push	r21
 49c:	6f 93       	push	r22
 49e:	7f 93       	push	r23
 4a0:	8f 93       	push	r24
 4a2:	9f 93       	push	r25
 4a4:	af 93       	push	r26
 4a6:	bf 93       	push	r27
 4a8:	ef 93       	push	r30
 4aa:	ff 93       	push	r31
	 Uint8t ReceivedData = SPDR ;
 4ac:	8f b1       	in	r24, 0x0f	; 15
		switch (ReceivedData)
 4ae:	83 36       	cpi	r24, 0x63	; 99
 4b0:	91 f1       	breq	.+100    	; 0x516 <__vector_12+0x8c>
 4b2:	28 f4       	brcc	.+10     	; 0x4be <__vector_12+0x34>
 4b4:	81 36       	cpi	r24, 0x61	; 97
 4b6:	59 f0       	breq	.+22     	; 0x4ce <__vector_12+0x44>
 4b8:	82 36       	cpi	r24, 0x62	; 98
 4ba:	d9 f0       	breq	.+54     	; 0x4f2 <__vector_12+0x68>
 4bc:	74 c0       	rjmp	.+232    	; 0x5a6 <__vector_12+0x11c>
 4be:	85 36       	cpi	r24, 0x65	; 101
 4c0:	09 f4       	brne	.+2      	; 0x4c4 <__vector_12+0x3a>
 4c2:	4d c0       	rjmp	.+154    	; 0x55e <__vector_12+0xd4>
 4c4:	d0 f1       	brcs	.+116    	; 0x53a <__vector_12+0xb0>
 4c6:	86 36       	cpi	r24, 0x66	; 102
 4c8:	09 f4       	brne	.+2      	; 0x4cc <__vector_12+0x42>
 4ca:	5b c0       	rjmp	.+182    	; 0x582 <__vector_12+0xf8>
 4cc:	6c c0       	rjmp	.+216    	; 0x5a6 <__vector_12+0x11c>
		{
			case 'a' :
			LCD_CLEAR();
 4ce:	0e 94 00 02 	call	0x400	; 0x400 <LCD_CLEAR>
			LCD_WRITE_STR("LED 1 OPEN");
 4d2:	80 e6       	ldi	r24, 0x60	; 96
 4d4:	90 e0       	ldi	r25, 0x00	; 0
 4d6:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_WRITE_STR>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 4da:	2f ef       	ldi	r18, 0xFF	; 255
 4dc:	82 e5       	ldi	r24, 0x52	; 82
 4de:	97 e0       	ldi	r25, 0x07	; 7
 4e0:	21 50       	subi	r18, 0x01	; 1
 4e2:	80 40       	sbci	r24, 0x00	; 0
 4e4:	90 40       	sbci	r25, 0x00	; 0
 4e6:	e1 f7       	brne	.-8      	; 0x4e0 <__vector_12+0x56>
 4e8:	00 c0       	rjmp	.+0      	; 0x4ea <__vector_12+0x60>
 4ea:	00 00       	nop
			_delay_ms(150);
			LED0_ON();
 4ec:	0e 94 0a 02 	call	0x414	; 0x414 <LED0_ON>
			break;
 4f0:	90 c0       	rjmp	.+288    	; 0x612 <__vector_12+0x188>
			case 'b' :
			LCD_CLEAR();
 4f2:	0e 94 00 02 	call	0x400	; 0x400 <LCD_CLEAR>
			LCD_WRITE_STR("LED 1 CLOSE");
 4f6:	8b e6       	ldi	r24, 0x6B	; 107
 4f8:	90 e0       	ldi	r25, 0x00	; 0
 4fa:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_WRITE_STR>
 4fe:	2f ef       	ldi	r18, 0xFF	; 255
 500:	82 e5       	ldi	r24, 0x52	; 82
 502:	97 e0       	ldi	r25, 0x07	; 7
 504:	21 50       	subi	r18, 0x01	; 1
 506:	80 40       	sbci	r24, 0x00	; 0
 508:	90 40       	sbci	r25, 0x00	; 0
 50a:	e1 f7       	brne	.-8      	; 0x504 <__vector_12+0x7a>
 50c:	00 c0       	rjmp	.+0      	; 0x50e <__vector_12+0x84>
 50e:	00 00       	nop
			_delay_ms(150);
			LED0_OFF();
 510:	0e 94 10 02 	call	0x420	; 0x420 <LED0_OFF>
			break;
 514:	7e c0       	rjmp	.+252    	; 0x612 <__vector_12+0x188>
			case 'c' :
			LCD_CLEAR();
 516:	0e 94 00 02 	call	0x400	; 0x400 <LCD_CLEAR>
			LCD_WRITE_STR("LED 2 OPEN");
 51a:	87 e7       	ldi	r24, 0x77	; 119
 51c:	90 e0       	ldi	r25, 0x00	; 0
 51e:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_WRITE_STR>
 522:	2f ef       	ldi	r18, 0xFF	; 255
 524:	82 e5       	ldi	r24, 0x52	; 82
 526:	97 e0       	ldi	r25, 0x07	; 7
 528:	21 50       	subi	r18, 0x01	; 1
 52a:	80 40       	sbci	r24, 0x00	; 0
 52c:	90 40       	sbci	r25, 0x00	; 0
 52e:	e1 f7       	brne	.-8      	; 0x528 <__vector_12+0x9e>
 530:	00 c0       	rjmp	.+0      	; 0x532 <__vector_12+0xa8>
 532:	00 00       	nop
			_delay_ms(150);
			LED1_ON();
 534:	0e 94 1c 02 	call	0x438	; 0x438 <LED1_ON>
			break;
 538:	6c c0       	rjmp	.+216    	; 0x612 <__vector_12+0x188>
			case 'd' :
			LCD_CLEAR();
 53a:	0e 94 00 02 	call	0x400	; 0x400 <LCD_CLEAR>
			LCD_WRITE_STR("LED 2 CLOSE");
 53e:	82 e8       	ldi	r24, 0x82	; 130
 540:	90 e0       	ldi	r25, 0x00	; 0
 542:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_WRITE_STR>
 546:	2f ef       	ldi	r18, 0xFF	; 255
 548:	82 e5       	ldi	r24, 0x52	; 82
 54a:	97 e0       	ldi	r25, 0x07	; 7
 54c:	21 50       	subi	r18, 0x01	; 1
 54e:	80 40       	sbci	r24, 0x00	; 0
 550:	90 40       	sbci	r25, 0x00	; 0
 552:	e1 f7       	brne	.-8      	; 0x54c <__vector_12+0xc2>
 554:	00 c0       	rjmp	.+0      	; 0x556 <__vector_12+0xcc>
 556:	00 00       	nop
			_delay_ms(150);
			LED1_OFF();
 558:	0e 94 22 02 	call	0x444	; 0x444 <LED1_OFF>
			break;
 55c:	5a c0       	rjmp	.+180    	; 0x612 <__vector_12+0x188>
			case 'e' :
			LCD_CLEAR();
 55e:	0e 94 00 02 	call	0x400	; 0x400 <LCD_CLEAR>
			LCD_WRITE_STR("LED 3 OPEN");
 562:	8e e8       	ldi	r24, 0x8E	; 142
 564:	90 e0       	ldi	r25, 0x00	; 0
 566:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_WRITE_STR>
 56a:	2f ef       	ldi	r18, 0xFF	; 255
 56c:	82 e5       	ldi	r24, 0x52	; 82
 56e:	97 e0       	ldi	r25, 0x07	; 7
 570:	21 50       	subi	r18, 0x01	; 1
 572:	80 40       	sbci	r24, 0x00	; 0
 574:	90 40       	sbci	r25, 0x00	; 0
 576:	e1 f7       	brne	.-8      	; 0x570 <__vector_12+0xe6>
 578:	00 c0       	rjmp	.+0      	; 0x57a <__vector_12+0xf0>
 57a:	00 00       	nop
			_delay_ms(150);
			LED2_ON();
 57c:	0e 94 2e 02 	call	0x45c	; 0x45c <LED2_ON>
			break;
 580:	48 c0       	rjmp	.+144    	; 0x612 <__vector_12+0x188>
			case 'f' :
			LCD_CLEAR();
 582:	0e 94 00 02 	call	0x400	; 0x400 <LCD_CLEAR>
			LCD_WRITE_STR("LED 3 CLOSE");
 586:	89 e9       	ldi	r24, 0x99	; 153
 588:	90 e0       	ldi	r25, 0x00	; 0
 58a:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_WRITE_STR>
 58e:	2f ef       	ldi	r18, 0xFF	; 255
 590:	82 e5       	ldi	r24, 0x52	; 82
 592:	97 e0       	ldi	r25, 0x07	; 7
 594:	21 50       	subi	r18, 0x01	; 1
 596:	80 40       	sbci	r24, 0x00	; 0
 598:	90 40       	sbci	r25, 0x00	; 0
 59a:	e1 f7       	brne	.-8      	; 0x594 <__vector_12+0x10a>
 59c:	00 c0       	rjmp	.+0      	; 0x59e <__vector_12+0x114>
 59e:	00 00       	nop
			_delay_ms(150);
			LED2_OFF();
 5a0:	0e 94 34 02 	call	0x468	; 0x468 <LED2_OFF>
			break;
 5a4:	36 c0       	rjmp	.+108    	; 0x612 <__vector_12+0x188>
			default:
			LCD_CLEAR();
 5a6:	0e 94 00 02 	call	0x400	; 0x400 <LCD_CLEAR>
			LCD_WRITE_STR("Wrong Input !!");
 5aa:	85 ea       	ldi	r24, 0xA5	; 165
 5ac:	90 e0       	ldi	r25, 0x00	; 0
 5ae:	0e 94 f3 01 	call	0x3e6	; 0x3e6 <LCD_WRITE_STR>
 5b2:	2f ef       	ldi	r18, 0xFF	; 255
 5b4:	82 e5       	ldi	r24, 0x52	; 82
 5b6:	97 e0       	ldi	r25, 0x07	; 7
 5b8:	21 50       	subi	r18, 0x01	; 1
 5ba:	80 40       	sbci	r24, 0x00	; 0
 5bc:	90 40       	sbci	r25, 0x00	; 0
 5be:	e1 f7       	brne	.-8      	; 0x5b8 <__vector_12+0x12e>
 5c0:	00 c0       	rjmp	.+0      	; 0x5c2 <__vector_12+0x138>
 5c2:	00 00       	nop
			_delay_ms(150);
			LED0_ON();
 5c4:	0e 94 0a 02 	call	0x414	; 0x414 <LED0_ON>
 5c8:	2f ef       	ldi	r18, 0xFF	; 255
 5ca:	82 e5       	ldi	r24, 0x52	; 82
 5cc:	97 e0       	ldi	r25, 0x07	; 7
 5ce:	21 50       	subi	r18, 0x01	; 1
 5d0:	80 40       	sbci	r24, 0x00	; 0
 5d2:	90 40       	sbci	r25, 0x00	; 0
 5d4:	e1 f7       	brne	.-8      	; 0x5ce <__vector_12+0x144>
 5d6:	00 c0       	rjmp	.+0      	; 0x5d8 <__vector_12+0x14e>
 5d8:	00 00       	nop
			_delay_ms(150);
			LED0_OFF();
 5da:	0e 94 10 02 	call	0x420	; 0x420 <LED0_OFF>
			LED1_ON();
 5de:	0e 94 1c 02 	call	0x438	; 0x438 <LED1_ON>
 5e2:	2f ef       	ldi	r18, 0xFF	; 255
 5e4:	82 e5       	ldi	r24, 0x52	; 82
 5e6:	97 e0       	ldi	r25, 0x07	; 7
 5e8:	21 50       	subi	r18, 0x01	; 1
 5ea:	80 40       	sbci	r24, 0x00	; 0
 5ec:	90 40       	sbci	r25, 0x00	; 0
 5ee:	e1 f7       	brne	.-8      	; 0x5e8 <__vector_12+0x15e>
 5f0:	00 c0       	rjmp	.+0      	; 0x5f2 <__vector_12+0x168>
 5f2:	00 00       	nop
			_delay_ms(150);
			LED1_OFF();
 5f4:	0e 94 22 02 	call	0x444	; 0x444 <LED1_OFF>
			LED2_ON();
 5f8:	0e 94 2e 02 	call	0x45c	; 0x45c <LED2_ON>
 5fc:	2f ef       	ldi	r18, 0xFF	; 255
 5fe:	82 e5       	ldi	r24, 0x52	; 82
 600:	97 e0       	ldi	r25, 0x07	; 7
 602:	21 50       	subi	r18, 0x01	; 1
 604:	80 40       	sbci	r24, 0x00	; 0
 606:	90 40       	sbci	r25, 0x00	; 0
 608:	e1 f7       	brne	.-8      	; 0x602 <__vector_12+0x178>
 60a:	00 c0       	rjmp	.+0      	; 0x60c <__vector_12+0x182>
 60c:	00 00       	nop
			_delay_ms(150);
			LED2_OFF();
 60e:	0e 94 34 02 	call	0x468	; 0x468 <LED2_OFF>
			break;
		}
 612:	ff 91       	pop	r31
 614:	ef 91       	pop	r30
 616:	bf 91       	pop	r27
 618:	af 91       	pop	r26
 61a:	9f 91       	pop	r25
 61c:	8f 91       	pop	r24
 61e:	7f 91       	pop	r23
 620:	6f 91       	pop	r22
 622:	5f 91       	pop	r21
 624:	4f 91       	pop	r20
 626:	3f 91       	pop	r19
 628:	2f 91       	pop	r18
 62a:	0f 90       	pop	r0
 62c:	0f be       	out	0x3f, r0	; 63
 62e:	0f 90       	pop	r0
 630:	1f 90       	pop	r1
 632:	18 95       	reti

00000634 <SPI_Init>:
	SET_BIT(SPI_PORT, CLK);/*Define direction as output*/
	SET_BIT(SPI_PORT, SS); /*Define direction as output*/
	//SPCR = 0x53;//0b 0101 0011
	SPCR = 0xD3;
	#elif SPI_MODE == SLAVE
	CLR_BIT(SPI_PORT, MOSI);/*Define direction as input*/
 634:	87 b3       	in	r24, 0x17	; 23
 636:	8f 7d       	andi	r24, 0xDF	; 223
 638:	87 bb       	out	0x17, r24	; 23
	SET_BIT(SPI_PORT, MISO);/*Define direction as output*/
 63a:	87 b3       	in	r24, 0x17	; 23
 63c:	80 64       	ori	r24, 0x40	; 64
 63e:	87 bb       	out	0x17, r24	; 23
	CLR_BIT(SPI_PORT, CLK);/*Define direction as input*/
 640:	87 b3       	in	r24, 0x17	; 23
 642:	8f 77       	andi	r24, 0x7F	; 127
 644:	87 bb       	out	0x17, r24	; 23
	CLR_BIT(SPI_PORT, SS); /*Define direction as input*/
 646:	87 b3       	in	r24, 0x17	; 23
 648:	8f 7e       	andi	r24, 0xEF	; 239
 64a:	87 bb       	out	0x17, r24	; 23
	//SPCR = 0x43;//0b 0100 0011
	SPCR = 0xC3;
 64c:	83 ec       	ldi	r24, 0xC3	; 195
 64e:	8d b9       	out	0x0d, r24	; 13
	#endif
	
	SET_BIT(SREG,7);
 650:	8f b7       	in	r24, 0x3f	; 63
 652:	80 68       	ori	r24, 0x80	; 128
 654:	8f bf       	out	0x3f, r24	; 63
 656:	08 95       	ret

00000658 <_exit>:
 658:	f8 94       	cli

0000065a <__stop_program>:
 65a:	ff cf       	rjmp	.-2      	; 0x65a <__stop_program>
